#region COPYRIGHT© 2009-2013 Phillip Clark. All rights reserved.
// For licensing information see License.txt (MIT style licensing).
#endregion

using System;
using System.Diagnostics.Contracts;
using FlitBit.Dto.Properties;
using FlitBit.Dto.SPI;
using FlitBit.Core;

namespace FlitBit.Dto
{
	/// <summary>
	/// Base class for IDataTransferObject implementations generated by the framework.
	/// </summary>
	/// <typeparam name="T">interface type T</typeparam>
	[Serializable]
	public abstract partial class DataTransferObject<T> : IEquatable<T>
	{
		static readonly int CHashCodeSeed = typeof(DataTransferObject<T>).AssemblyQualifiedName.GetHashCode();
		bool _writable;

		/// <summary>
		/// Creates an instance.
		/// </summary>
		/// <param name="writable">indicates whether the instance is writable</param>
		protected DataTransferObject(bool writable)
		{
			_writable = writable;
		}

		/// <summary>
		/// Called by the framework to mark an DataTransferObject as readonly.
		/// </summary>
		public void MarkReadonly()
		{
			_writable = false;
		}

		/// <summary>
		/// Ensures the instance is writable.
		/// </summary>    
		protected void CheckWriteOnce()
		{
			if (!_writable) throw new InvalidOperationException(Resources.Chk_DataTransferObjectsAreImmutable);
		}
		
		/// <summary>
		/// Compares this object to another for equality.
		/// </summary>
		/// <param name="obj"></param>
		/// <returns></returns>
		public override bool Equals(object obj)
		{
			return obj is T && PerformEqual((T)obj);
		}

		/// <summary>
		/// Calcuates the object's hashcode.
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode()
		{
			int prime = Constants.NotSoRandomPrime;
			var res = CHashCodeSeed * prime;
			res ^= (_writable ? 0 : 1) * prime;
			return res;
		}
		
		/// <summary>
		/// Compares this object to another for equality.
		/// </summary>
		/// <param name="other"></param>
		/// <returns></returns>
		public bool Equals(T other)
		{
			return other != null && PerformEqual(other);
		}

		/// <summary>
		/// Specialized by implementations to compare another object for equality.
		/// </summary>
		/// <param name="other"></param>
		/// <returns></returns>
		protected abstract bool PerformEqual(T other);
	}	
}
