#region COPYRIGHT© 2009-2013 Phillip Clark. All rights reserved.
// For licensing information see License.txt (MIT style licensing).
#endregion

using System;
using System.Diagnostics.Contracts;
using FlitBit.Dto.Properties;
using FlitBit.Dto.SPI;
using FlitBit.Validations;

namespace FlitBit.Dto
{
	/// <summary>
	/// Base class for IDataTransferObject implementations generated by the framework.
	/// </summary>
	/// <typeparam name="T">interface type T</typeparam>
	[Serializable]
	public abstract partial class DataTransferObject<T> : IUserInput
	{
		bool _writable = true;

		/// <summary>
		/// Called by the framework to mark an DataTransferObject as readonly.
		/// </summary>
		public void MarkReadonly()
		{
			_writable = false;
		}

		/// <summary>
		/// Ensures the instance is writable.
		/// </summary>    
		protected void CheckWriteOnce()
		{
			if (!_writable) throw new InvalidOperationException(Resources.Chk_DataTransferObjectsAreImmutable);
		}
			
		/// <summary>
		/// Determines validity of user input.
		/// </summary>
		/// <param name="collector">collector for input errors</param>
		/// <returns><em>true</em> if successfully validated without errors; otherwise <em>false</em></returns>
		public bool IsValidUserInput(IUserInputErrorCollector collector)
		{
			return PerformIsValidUserInput(collector);
		}

		/// <summary>
		/// Callback method for subclasses to determine validity of user input.
		/// </summary>
		/// <param name="collector">collector for input errors</param>
		/// <returns><em>true</em> if successfully validated without errors; otherwise <em>false</em></returns>
		protected virtual bool PerformIsValidUserInput(IUserInputErrorCollector collector)
		{
			return true;
		}
	}	
}
